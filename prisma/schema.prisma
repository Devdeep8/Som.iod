datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  password          String?
  role              Role      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLogin         DateTime?
  isActive          Boolean   @default(true)
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  accounts          Account[]
  sessions          Session[]
  profile           Profile?
  tasks             Task[]
  sleepLogs         SleepLog[]
  meals             Meal[]
  workouts          Workout[]

  @@map("users")
}

model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  bio             String?   @db.Text
  location        String?
  website         String?
  birthDate       DateTime?
  phoneNumber     String?
  gender          Gender?
  customFields    Json?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  status      TaskStatus @default(TODO)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model SleepLog {
  id        String   @id @default(cuid())
  sleepTime DateTime
  wakeTime  DateTime
  duration  Int
  quality   Int
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sleeplogs")
}

model Meal {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  calories    Int?
  protein     Float?
  carbs       Float?
  fat         Float?
  eatenAt     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("meals")
}

model Workout {
  id            String   @id @default(cuid())
  name          String
  description   String?  @db.Text
  duration      Int
  caloriesBurned Int?
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises     Exercise[]

  @@map("workouts")
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  sets        Int
  reps        Int
  weight      Float?
  duration    Int?
  notes       String?  @db.Text
  workoutId   String
  workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}